group = 'ru.iopump'


ext {
    versions = [
            aspectj: "1.8.10",
            allure_gradle: "2.5",
            annotations: "3.0.2",
            lombok: "latest.release",
            apache: "latest.release",
            guava: "latest.release",
            reflections: "latest.release",
            logger: "latest.release",
            junit: "4.12",
            jackson: "2.9.0.pr4",
            selenium: "3.7.0",
            allure: "latest.release",
            assertj: "3.8.0",
            allureJunit4: "latest.release",
            junit5: "latest.release",
            mockito: "2.+",
            trove: "3.+",
            joda_time: "latest.release"
    ]
}

apply plugin: 'idea'

task info {
    doLast {
        println 'Information'
        println project.name
        println project.description
        println project.version
        println project.group
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:latest.release'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:latest.release'
        classpath 'io.qameta.allure:allure-gradle:latest.release'
    }
}

task clean(group: "build") {
    doLast {
        println "start clean : $project.name"
        delete buildDir
        println "dir clean finish : $buildDir"

        delete "${rootDir}/out"
        println "dir clean finish : ${rootDir}/out"

        delete "${rootDir}/target"
        println "dir clean finish : ${rootDir}/target"

        delete "${rootDir}/allure-results"
        println "dir clean finish : ${rootDir}/allure-results"
    }
}

subprojects {

    project.version = rootProject.version
    project.group = rootProject.group

    apply plugin: 'signing'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'


    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    repositories {
        maven { url 'https://jitpack.io' }
    }

    /*sub projects full clean*/
    clean.doFirst {
        println "start clean : $project.name"

        delete "${project.projectDir}/out"
        println "dir clean finish : ${project.projectDir}/out"

        delete "${project.projectDir}/target"
        println "dir clean finish : ${project.projectDir}/target"

        delete "${project.projectDir}/allure-results"
        println "dir clean finish : ${project.projectDir}/allure-results"
    }

    junitPlatform {
        details 'tree'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {

        compile(
                "org.projectlombok:lombok:$versions.lombok",
                "joda-time:joda-time:$versions.joda_time",
                "org.aspectj:aspectjweaver:1.8.13",
                "com.google.code.findbugs:jsr305:$versions.annotations",
                "org.apache.httpcomponents:httpclient:$versions.apache",
                "org.reflections:reflections:$versions.reflections",
                "commons-collections:commons-collections:$versions.apache",
                "com.google.guava:guava:$versions.guava",
                "org.apache.commons:commons-lang3:$versions.apache",
                "commons-io:commons-io:$versions.apache",
                "org.apache.commons:commons-text:$versions.apache",
                "ch.qos.logback:logback-classic:$versions.logger",
                "ch.qos.logback:logback-core:$versions.logger",
                "org.seleniumhq.selenium:selenium-java:$versions.selenium",
                "io.qameta.allure:allure-java-commons:$versions.allure",
                "net.sf.trove4j:trove4j:$versions.trove",
                "io.qameta.allure:allure-gradle:$versions.allure_gradle"
        )

        testCompileOnly('org.apiguardian:apiguardian-api:+')

        testRuntime("org.junit.jupiter:junit-jupiter-engine:$versions.junit5")

        testCompile(
                "org.junit.jupiter:junit-jupiter-api:$versions.junit5",
                "org.assertj:assertj-core:$versions.assertj",
                "org.mockito:mockito-core:$versions.mockito",
                "io.qameta.allure:allure-junit5:latest.release",
                "io.qameta.allure:allure-gradle:$versions.allure_gradle"
        )
    }



    javadoc {
        failOnError = false
    }

    jar {
        println "custom jar $project.name"
        if (project.name == "cucumber") {
            println 'cucumber'
            from sourceSets.test.output.classesDirs.getAsFileTree().matching {
                include('**/steps/**')
            } + sourceSets.main.output
        } else {
            from sourceSets.main.output
        }
    }

    task customJar(type: Jar) {
        println "custom jar $project.name"
        if (project.name == "cucumber") {
            println 'cucumber'
            from sourceSets.test.output.classesDirs.getAsFileTree().matching {
                include('**/steps/**')
            } + sourceSets.main.output
        } else {
            from sourceSets.main.output
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task projectJavadoc(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }



    artifacts {
        archives jar
        archives sourceJar
        archives projectJavadoc
    }

    task signJars (type : Sign, dependsOn: [customJar, projectJavadoc, sourceJar]) {
        sign configurations.archives
    }

    task preparePublish(dependsOn: signJars)

    def getSignatureFiles = {
        def allFiles = project.tasks.signJars.signatureFiles.collect { it }
        def signedSources = allFiles.find { it.name.contains('-sources') }
        def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
        def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
        return [
                [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
                [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
                [archive: signedJar,     classifier: '',      extension: 'jar.asc']
        ]
    }



    publishing {
        publications {
            /*
            signatures (MavenPublication) {
                getSignatureFiles().each { signature ->
                    println "signature: " + signature
                    println "signature.archive: " + signature.archive
                    println ""
                    artifact (signature.archive) {
                        classifier = signature.classifier
                        extension  = signature.extension
                    }
                }
            }
            */
            eachProject(MavenPublication) {
                from components.java
                //artifact tasks.customJar
                artifact tasks.sourceJar
                artifact tasks.projectJavadoc

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name project.name
                        description project.description
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'kochetkov-ma'
                                name 'Kochetkov Maksim'
                                email 'kochetkov-ma@yandex.ru'
                            }
                        }
                    }
                }

            }
        }
        repositories {
            maven {
                name "open-nexus"
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "http://rumskapt527.open.ru:8081/content/repositories/automatization_snapshots/"
                } else {
                    url "http://rumskapt527.open.ru:8081/content/repositories/automatization_releases/"
                }
            }
        }
    }
}

