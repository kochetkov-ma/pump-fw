buildscript {
    repositories {
        mavenLocal()
        maven {
            url "http://msk1-vm-nexus01.unix.nspk.ru:8081/nexus/content/repositories/public"
        }
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'io.qameta.allure:allure-gradle:2.5'
        classpath 'io.franzbecker:gradle-lombok:1.14'
    }
}
group = 'ru.iopump.pumpfw'
ext {
    versions = [
            allure_gradle     : "2.5",
            annotations       : "3.0.2",
            lombok            : "1.18.4",
            httpclient        : "4.5.6",
            commonsCollections: "3.2.2",
            commonsLang3      : "3.8.1",
            commonsIo         : "2.6",
            commonsText       : "1.6",
            guava             : "27.0.1-jre",
            reflections       : "0.9.11",
            logger            : "1.2.3",
            junit             : "4.12",
            jackson           : "2.9.8",
            selenium          : "3.141.59",
            allure            : "2.8.1",
            assertj           : "3.11.1",
            junit5            : "5.3.2",
            mockito           : "2.23.4",
            trove             : "3.0.3",
            joda_time         : "2.10.1",
            appium            : "6.1.0",
            guice             : "4.2.2"
    ]
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}
task ('clean') {
    group = 'build'
    doFirst {
        println "clean main project : $project.name"
        delete "${project.projectDir}/out"
        delete "${project.projectDir}/build"
        delete "${project.projectDir}/allure-results"
        subprojects.each {
            it.afterEvaluate {
                def cleanTask = it.tasks.findByName('clean')
                if (cleanTask) {
                    dependsOn(cleanTask)
                }
            }
        }
    }
}
allprojects {
    apply plugin: 'io.qameta.allure'
    wrapper {
        gradleVersion = '5.1'
        distributionType = Wrapper.DistributionType.ALL
    }
    allure {
        version = '2.6.0'
        resultsDir = rootProject.file('allure-results')
        aspectjweaver = true
        downloadLink = 'http://nexus.nspk.ru:8081/nexus/service/local/repositories/thirdparty/content/io/qameta/allure-cli/2.6.0/allure-cli-2.6.0.zip'
    }

}
subprojects {
    project.version = rootProject.version
    project.group = rootProject.group
    
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'io.franzbecker.gradle-lombok'
    lombok {
        version = versions.lombok
    }
    idea {
        module {
            inheritOutputDirs = false
            //outputDir = file("$buildDir/classes/java/main")
            //testOutputDir = file("$buildDir/classes/java/test")
            downloadJavadoc = true
            downloadSources = true
        }
    }
    repositories {
        mavenLocal()
        maven {
            url "http://msk1-vm-nexus01.unix.nspk.ru:8081/nexus/content/repositories/public"
        }
    }
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    clean.doFirst {
        println "clean subproject : $project.name"
        delete "${project.projectDir}/out"
        delete "${project.projectDir}/build"
        delete "${project.projectDir}/allure-results"
    }
    dependencies {
        compile(
                "com.google.inject:guice:$versions.guice",
                "io.appium:java-client:$versions.appium",
                "joda-time:joda-time:$versions.joda_time",
                "com.google.code.findbugs:jsr305:$versions.annotations",
                "org.apache.httpcomponents:httpclient:$versions.httpclient",
                "org.reflections:reflections:$versions.reflections",
                "commons-collections:commons-collections:$versions.commonsCollections",
                "com.google.guava:guava:$versions.guava",
                "org.apache.commons:commons-lang3:$versions.commonsLang3",
                "commons-io:commons-io:$versions.commonsIo",
                "org.apache.commons:commons-text:$versions.commonsText",
                "ch.qos.logback:logback-classic:$versions.logger",
                "ch.qos.logback:logback-core:$versions.logger",
                "org.seleniumhq.selenium:selenium-java:$versions.selenium",
                "io.qameta.allure:allure-java-commons:$versions.allure",
                "net.sf.trove4j:trove4j:$versions.trove"
        )
        testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$versions.junit5")
        testCompile(
                "org.junit.jupiter:junit-jupiter-api:$versions.junit5",
                "org.assertj:assertj-core:$versions.assertj",
                "org.mockito:mockito-core:$versions.mockito"
        )
    }
    javadoc {
        failOnError = false
    }
    jar {
        println "custom jar $project.name"
        from sourceSets.main.output
    }
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }
    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }
    artifacts {
        archives sourceJar, javadocJar
    }
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
    /*publishing to maven central*/
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url 'https://github.com/kochetkov-ma/pump-fw'
                    scm {
                        connection 'https://github.com/kochetkov-ma/pump-fw.git'
                        developerConnection 'https://github.com/kochetkov-ma/pump-fw.git'
                        url 'https://github.com/kochetkov-ma/pump-fw'
                    }
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'kochetkov-ma'
                            name 'Kochetkov Maksim'
                            email 'kochetkov-ma@yandex.ru'
                        }
                    }
                }
            }
        }
    }
    /*publishing to maven local*/
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from project.components.java
                artifact sourceJar
                artifact javadocJar
                pom {
                    name =  project.name
                    packaging = 'jar'
                    description = project.description
                    url = 'https://github.com/kochetkov-ma/pump-fw'
                    scm {
                        connection = 'https://github.com/kochetkov-ma/pump-fw.git'
                        developerConnection = 'https://github.com/kochetkov-ma/pump-fw.git'
                        url = 'https://github.com/kochetkov-ma/pump-fw'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'kochetkov-ma'
                            name = 'Kochetkov Maksim'
                            email = 'kochetkov-ma@yandex.ru'
                        }
                    }
                }
            }
        }
    }
}