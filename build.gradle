group = 'ru.iopump.pumpfw'


ext {
    versions = [
            aspectj      : "1.8.10",
            allure_gradle: "2.5",
            annotations  : "3.0.2",
            lombok       : "latest.release",
            apache       : "latest.release",
            guava        : "latest.release",
            reflections  : "latest.release",
            logger       : "latest.release",
            junit        : "4.12",
            jackson      : "2.9.0.pr4",
            selenium     : "3.7.0",
            allure       : "latest.release",
            assertj      : "3.8.0",
            allureJunit4 : "latest.release",
            junit5       : "latest.release",
            mockito      : "2.+",
            trove        : "3.+",
            joda_time    : "latest.release",
            appium       : "6.0.0-BETA4"
    ]
}

apply plugin: 'idea'

task info {
    doLast {
        println 'Information'
        println project.name
        println project.description
        println project.version
        println project.group
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:latest.release'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:latest.release'
        classpath 'io.qameta.allure:allure-gradle:latest.release'
    }
}

task clean(group: "build") {
    doLast {
        println "start clean : $project.name"
        delete buildDir
        println "dir clean finish : $buildDir"

        delete "${rootDir}/out"
        println "dir clean finish : ${rootDir}/out"

        delete "${rootDir}/target"
        println "dir clean finish : ${rootDir}/target"

        delete "${rootDir}/allure-results"
        println "dir clean finish : ${rootDir}/allure-results"
    }
}

subprojects {

    project.version = rootProject.version
    project.group = rootProject.group
    //project.archivesBaseName=project.name

    apply plugin: 'signing'
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'io.qameta.allure'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    repositories {
        maven { url 'https://jitpack.io' }
    }

    /*sub projects full clean*/
    clean.doFirst {
        println "start clean : $project.name"

        delete "${project.projectDir}/out"
        println "dir clean finish : ${project.projectDir}/out"

        delete "${project.projectDir}/target"
        println "dir clean finish : ${project.projectDir}/target"

        delete "${project.projectDir}/allure-results"
        println "dir clean finish : ${project.projectDir}/allure-results"
    }

    junitPlatform {
        details 'tree'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {

        compile(
                "io.appium:java-client:$versions.appium",
                "org.projectlombok:lombok:$versions.lombok",
                "joda-time:joda-time:$versions.joda_time",
                "org.aspectj:aspectjweaver:1.8.13",
                "com.google.code.findbugs:jsr305:$versions.annotations",
                "org.apache.httpcomponents:httpclient:$versions.apache",
                "org.reflections:reflections:$versions.reflections",
                "commons-collections:commons-collections:$versions.apache",
                "com.google.guava:guava:$versions.guava",
                "org.apache.commons:commons-lang3:$versions.apache",
                "commons-io:commons-io:$versions.apache",
                "org.apache.commons:commons-text:$versions.apache",
                "ch.qos.logback:logback-classic:$versions.logger",
                "ch.qos.logback:logback-core:$versions.logger",
                "org.seleniumhq.selenium:selenium-java:$versions.selenium",
                "io.qameta.allure:allure-java-commons:$versions.allure",
                "net.sf.trove4j:trove4j:$versions.trove"
        )

        testCompileOnly('org.apiguardian:apiguardian-api:+')

        testRuntime("org.junit.jupiter:junit-jupiter-engine:$versions.junit5")

        testCompile(
                "org.junit.jupiter:junit-jupiter-api:$versions.junit5",
                "org.assertj:assertj-core:$versions.assertj",
                "org.mockito:mockito-core:$versions.mockito",
                "io.qameta.allure:allure-junit5:latest.release"
                //"io.qameta.allure:allure-gradle:$versions.allure_gradle"
        )
    }

    javadoc {
        failOnError = false
    }

    jar {
        println "custom jar $project.name"
        if (project.name == "cucumber") {
            println 'cucumber'
            from sourceSets.test.output.classesDirs.getAsFileTree().matching {
                include('**/steps/**')
            } + sourceSets.main.output
        } else {
            from sourceSets.main.output
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    artifacts {
        archives sourceJar, javadocJar
    }

    signing {
        sign configurations.archives
    }

    task uploadOpenNexus(type: Upload) {
        configuration = configurations.archives
        uploadDescriptor = true
        repositories {
            mavenDeployer {
                repository(url: "http://rumskapt527.open.ru:8081/content/repositories/automatization_releases/") {
                    authentication(userName: openNexusUsername, password: openNexusPassword)
                }

                snapshotRepository(url: "http://rumskapt527.open.ru:8081/content/repositories/automatization_snapshots/") {
                    authentication(userName: openNexusUsername, password: openNexusPassword)
                }
            }
        }
    }

    uploadArchives {
        repositories {
            //noinspection GroovyAssignabilityCheck
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url 'https://github.com/kochetkov-ma/pump-fw'

                    scm {
                        connection 'https://github.com/kochetkov-ma/pump-fw.git'
                        developerConnection 'https://github.com/kochetkov-ma/pump-fw.git'
                        url 'https://github.com/kochetkov-ma/pump-fw'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'kochetkov-ma'
                            name 'Kochetkov Maksim'
                            email 'kochetkov-ma@yandex.ru'
                        }
                    }
                }
            }
        }
    }
}